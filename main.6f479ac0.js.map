{"version":3,"sources":["scripts/main.js"],"names":["gameField","score","document","querySelector","button","startGameText","loseGameText","winGameText","cells","querySelectorAll","numOfCells","mergedScore","gameStarted","startGame","classList","add","innerText","Array","from","length","fill","addRandomNumber","updateCells","restartGame","replace","emptyCells","i","j","push","row","col","randomIndex","Math","floor","random","cell","num","textContent","className","isGameWon","remove","isGameLost","some","includes","flat","moveUp","moved","currentMergedScore","k","moveDown","moveLeft","moveRight","addEventListener","e","code"],"mappings":"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","file":"main.6f479ac0.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst score = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\nconst startGameText = document.querySelector('.message-start');\nconst loseGameText = document.querySelector('.message-lose');\nconst winGameText = document.querySelector('.message-win');\nconst cells = document.querySelectorAll('.field-cell');\n\nconst numOfCells = 4;\nlet mergedScore = 0;\nlet gameField;\nlet gameStarted = false;\n\nbutton.addEventListener('click', () => {\n  if (gameStarted) {\n    restartGame();\n  } else {\n    startGame();\n  }\n});\n\nfunction startGame() {\n  gameStarted = true;\n  button.classList.add('start');\n  button.innerText = 'Start';\n  startGameText.classList.add('hidden');\n  loseGameText.classList.add('hidden');\n  winGameText.classList.add('hidden');\n\n  gameField = Array.from({ length: numOfCells }, () =>\n    Array(numOfCells).fill(0)\n  );\n  mergedScore = 0;\n  score.innerText = mergedScore;\n\n  addRandomNumber();\n  addRandomNumber();\n  updateCells();\n}\n\nfunction restartGame() {\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n\n  gameField = Array.from({ length: numOfCells }, () =>\n    Array(numOfCells).fill(0)\n  );\n  mergedScore = 0;\n  score.innerText = mergedScore;\n\n  addRandomNumber();\n  addRandomNumber();\n  updateCells();\n}\n\nfunction addRandomNumber() {\n  const emptyCells = [];\n\n  for (let i = 0; i < numOfCells; i++) {\n    for (let j = 0; j < numOfCells; j++) {\n      if (gameField[i][j] === 0) {\n        emptyCells.push({\n          row: i,\n          col: j,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const { row, col } = emptyCells[randomIndex];\n\n    gameField[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n}\n\nfunction updateCells() {\n  for (let i = 0; i < numOfCells; i++) {\n    for (let j = 0; j < numOfCells; j++) {\n      const cell = cells[i * numOfCells + j];\n      const num = gameField[i][j];\n\n      cell.textContent = gameStarted ? (num === 0 ? '' : num) : '';\n      cell.className = `field-cell cell-${num}`;\n    }\n  }\n\n  score.innerText = mergedScore;\n\n  if (isGameWon()) {\n    winGameText.classList.remove('hidden');\n    button.classList.replace('restart', 'start');\n    gameStarted = false;\n  }\n\n  if (isGameLost()) {\n    loseGameText.classList.remove('hidden');\n    gameStarted = false;\n  }\n}\n\nfunction isGameWon() {\n  return gameField.some((row) => row.includes(2048));\n}\n\nfunction isGameLost() {\n  if (gameField.flat().includes(0)) {\n    return false;\n  }\n\n  for (let i = 0; i < numOfCells; i++) {\n    for (let j = 0; j < numOfCells - 1; j++) {\n      if (\n        gameField[i][j] === gameField[i][j + 1] ||\n        gameField[j][i] === gameField[j + 1][i]\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\ndocument.addEventListener('keyup', (e) => {\n  if (isGameLost() || isGameWon()) {\n    return;\n  }\n\n  switch (e.code) {\n    case 'ArrowUp':\n      moveUp();\n      break;\n    case 'ArrowDown':\n      moveDown();\n      break;\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n    case 'ArrowRight':\n      moveRight();\n      break;\n    default:\n      return;\n  }\n\n  addRandomNumber();\n  updateCells();\n});\n\nfunction moveUp() {\n  let moved = false;\n  let currentMergedScore = 0;\n\n  for (let j = 0; j < numOfCells; j++) {\n    for (let i = 1; i < numOfCells; i++) {\n      if (gameField[i][j] !== 0) {\n        for (let k = i; k > 0; k--) {\n          if (gameField[k - 1][j] === 0\n            || gameField[k - 1][j] === gameField[k][j]) {\n            if (gameField[k - 1][j] === gameField[k][j]) {\n              gameField[k - 1][j] *= 2;\n              currentMergedScore += gameField[k - 1][j];\n            } else {\n              gameField[k - 1][j] = gameField[k][j];\n            }\n            gameField[k][j] = 0;\n            moved = true;\n          }\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    mergedScore += currentMergedScore;\n    moveUp();\n  }\n}\n\nfunction moveDown() {\n  let moved = false;\n  let currentMergedScore = 0;\n\n  for (let j = 0; j < numOfCells; j++) {\n    for (let i = numOfCells - 2; i >= 0; i--) {\n      if (gameField[i][j] !== 0) {\n        for (let k = i; k < numOfCells - 1; k++) {\n          if (gameField[k + 1][j] === 0\n            || gameField[k + 1][j] === gameField[k][j]) {\n            if (gameField[k + 1][j] === gameField[k][j]) {\n              gameField[k + 1][j] *= 2;\n              currentMergedScore += gameField[k + 1][j];\n            } else {\n              gameField[k + 1][j] = gameField[k][j];\n            }\n            gameField[k][j] = 0;\n            moved = true;\n          }\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    mergedScore += currentMergedScore;\n    moveDown();\n  }\n}\n\nfunction moveLeft() {\n  let moved = false;\n  let currentMergedScore = 0;\n\n  for (let i = 0; i < numOfCells; i++) {\n    for (let j = 1; j < numOfCells; j++) {\n      if (gameField[i][j] !== 0) {\n        for (let k = j; k > 0; k--) {\n          if (gameField[i][k - 1] === 0\n            || gameField[i][k - 1] === gameField[i][k]) {\n            if (gameField[i][k - 1] === gameField[i][k]) {\n              gameField[i][k - 1] *= 2;\n              currentMergedScore += gameField[i][k - 1];\n            } else {\n              gameField[i][k - 1] = gameField[i][k];\n            }\n            gameField[i][k] = 0;\n            moved = true;\n          }\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    mergedScore += currentMergedScore;\n    moveLeft();\n  }\n}\n\nfunction moveRight() {\n  let moved = false;\n  let currentMergedScore = 0;\n\n  for (let i = 0; i < numOfCells; i++) {\n    for (let j = numOfCells - 2; j >= 0; j--) {\n      if (gameField[i][j] !== 0) {\n        for (let k = j; k < numOfCells - 1; k++) {\n          if (gameField[i][k + 1] === 0\n            || gameField[i][k + 1] === gameField[i][k]) {\n            if (gameField[i][k + 1] === gameField[i][k]) {\n              gameField[i][k + 1] *= 2;\n              currentMergedScore += gameField[i][k + 1];\n            } else {\n              gameField[i][k + 1] = gameField[i][k];\n            }\n            gameField[i][k] = 0;\n            moved = true;\n          }\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    mergedScore += currentMergedScore;\n    moveRight();\n  }\n}\n"]}